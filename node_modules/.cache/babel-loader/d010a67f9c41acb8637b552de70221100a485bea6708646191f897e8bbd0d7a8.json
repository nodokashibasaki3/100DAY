{"ast":null,"code":"var _jsxFileName = \"/Users/nodokashibasaki/100DAY_DAY1/src/context/TaskContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport const useTaskContext = () => {\n  _s();\n  return useContext(TaskContext);\n};\n_s(useTaskContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const TaskProvider = ({\n  children\n}) => {\n  _s2();\n  const [tasks, setTasks] = useLocalStorage('voice_tasks', []);\n  const [categories, setCategories] = useLocalStorage('task_categories', []);\n  const [timeline, setTimeline] = useState('');\n  const [feasibilityAnalysis, setFeasibilityAnalysis] = useState(null);\n  const [viewMode, setViewMode] = useState('all'); // 'all', 'success', 'health', 'balanced'\n\n  // Calculate total required hours\n  const totalRequiredHours = tasks.filter(task => !task.completed).reduce((sum, task) => sum + (task.hoursNeeded || 0), 0);\n\n  // Filter tasks based on view mode and completion status\n  const getFilteredTasks = () => {\n    let filteredTasks = [...tasks];\n    if (feasibilityAnalysis) {\n      if (viewMode === 'success') {\n        const priorityTasks = feasibilityAnalysis.successPlan.tasks;\n        filteredTasks = tasks.filter(task => priorityTasks.includes(task.task) || task.completed);\n      } else if (viewMode === 'health') {\n        const priorityTasks = feasibilityAnalysis.healthPlan.tasks;\n        filteredTasks = tasks.filter(task => priorityTasks.includes(task.task) || task.completed);\n      } else if (viewMode === 'balanced') {\n        const priorityTasks = feasibilityAnalysis.balancedPlan.tasks;\n        filteredTasks = tasks.filter(task => priorityTasks.includes(task.task) || task.completed);\n      }\n    }\n\n    // Sort tasks by priority (highest first) and completion status\n    filteredTasks.sort((a, b) => {\n      if (a.completed && !b.completed) return 1;\n      if (!a.completed && b.completed) return -1;\n      if (a.completed && b.completed) return 0;\n      return b.priority - a.priority;\n    });\n    return filteredTasks;\n  };\n\n  // Group tasks by category\n  const getTasksByCategory = () => {\n    const filteredTasks = getFilteredTasks();\n    const tasksByCategory = {};\n    filteredTasks.forEach(task => {\n      if (!tasksByCategory[task.category]) {\n        tasksByCategory[task.category] = [];\n      }\n      tasksByCategory[task.category].push(task);\n    });\n    return tasksByCategory;\n  };\n  const addTasks = newTasks => {\n    // Add IDs to new tasks\n    const tasksWithIds = newTasks.map(task => ({\n      ...task,\n      id: Date.now() + Math.random().toString(36).substr(2, 9)\n    }));\n    setTasks([...tasks, ...tasksWithIds]);\n\n    // Extract unique categories\n    const uniqueCategories = [...new Set(newTasks.map(task => task.category))];\n    const existingCategoryNames = categories.map(cat => cat.name);\n\n    // Add new categories with colors\n    const newCategories = uniqueCategories.filter(cat => !existingCategoryNames.includes(cat)).map(cat => ({\n      name: cat,\n      color: getRandomColor()\n    }));\n    if (newCategories.length > 0) {\n      setCategories([...categories, ...newCategories]);\n    }\n\n    // Reset feasibility analysis when new tasks are added\n    setFeasibilityAnalysis(null);\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n\n    // Reset feasibility analysis when tasks are completed\n    setFeasibilityAnalysis(null);\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n\n    // Reset feasibility analysis when tasks are deleted\n    setFeasibilityAnalysis(null);\n  };\n  const getRandomColor = () => {\n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFBE0B', '#FB5607', '#8338EC', '#3A86FF', '#FF006E'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n  const getCategoryColor = categoryName => {\n    const category = categories.find(cat => cat.name === categoryName);\n    return category ? category.color : '#888';\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      categories,\n      timeline,\n      setTimeline,\n      feasibilityAnalysis,\n      setFeasibilityAnalysis,\n      viewMode,\n      setViewMode,\n      totalRequiredHours,\n      addTasks,\n      toggleTaskCompletion,\n      deleteTask,\n      getCategoryColor,\n      getFilteredTasks,\n      getTasksByCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s2(TaskProvider, \"y0Mp310SUJqOLuFekfaDyaxPLOA=\", false, function () {\n  return [useLocalStorage, useLocalStorage];\n});\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useLocalStorage","jsxDEV","_jsxDEV","TaskContext","useTaskContext","_s","TaskProvider","children","_s2","tasks","setTasks","categories","setCategories","timeline","setTimeline","feasibilityAnalysis","setFeasibilityAnalysis","viewMode","setViewMode","totalRequiredHours","filter","task","completed","reduce","sum","hoursNeeded","getFilteredTasks","filteredTasks","priorityTasks","successPlan","includes","healthPlan","balancedPlan","sort","a","b","priority","getTasksByCategory","tasksByCategory","forEach","category","push","addTasks","newTasks","tasksWithIds","map","id","Date","now","Math","random","toString","substr","uniqueCategories","Set","existingCategoryNames","cat","name","newCategories","color","getRandomColor","length","toggleTaskCompletion","deleteTask","colors","floor","getCategoryColor","categoryName","find","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nodokashibasaki/100DAY_DAY1/src/context/TaskContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst TaskContext = createContext();\n\nexport const useTaskContext = () => useContext(TaskContext);\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useLocalStorage('voice_tasks', []);\n  const [categories, setCategories] = useLocalStorage('task_categories', []);\n  const [timeline, setTimeline] = useState('');\n  const [feasibilityAnalysis, setFeasibilityAnalysis] = useState(null);\n  const [viewMode, setViewMode] = useState('all'); // 'all', 'success', 'health', 'balanced'\n  \n  // Calculate total required hours\n  const totalRequiredHours = tasks\n    .filter(task => !task.completed)\n    .reduce((sum, task) => sum + (task.hoursNeeded || 0), 0);\n  \n  // Filter tasks based on view mode and completion status\n  const getFilteredTasks = () => {\n    let filteredTasks = [...tasks];\n    \n    if (feasibilityAnalysis) {\n      if (viewMode === 'success') {\n        const priorityTasks = feasibilityAnalysis.successPlan.tasks;\n        filteredTasks = tasks.filter(task => \n          priorityTasks.includes(task.task) || task.completed\n        );\n      } else if (viewMode === 'health') {\n        const priorityTasks = feasibilityAnalysis.healthPlan.tasks;\n        filteredTasks = tasks.filter(task => \n          priorityTasks.includes(task.task) || task.completed\n        );\n      } else if (viewMode === 'balanced') {\n        const priorityTasks = feasibilityAnalysis.balancedPlan.tasks;\n        filteredTasks = tasks.filter(task => \n          priorityTasks.includes(task.task) || task.completed\n        );\n      }\n    }\n    \n    // Sort tasks by priority (highest first) and completion status\n    filteredTasks.sort((a, b) => {\n      if (a.completed && !b.completed) return 1;\n      if (!a.completed && b.completed) return -1;\n      if (a.completed && b.completed) return 0;\n      return b.priority - a.priority;\n    });\n    \n    return filteredTasks;\n  };\n  \n  // Group tasks by category\n  const getTasksByCategory = () => {\n    const filteredTasks = getFilteredTasks();\n    const tasksByCategory = {};\n    \n    filteredTasks.forEach(task => {\n      if (!tasksByCategory[task.category]) {\n        tasksByCategory[task.category] = [];\n      }\n      tasksByCategory[task.category].push(task);\n    });\n    \n    return tasksByCategory;\n  };\n  \n  const addTasks = (newTasks) => {\n    // Add IDs to new tasks\n    const tasksWithIds = newTasks.map(task => ({\n      ...task,\n      id: Date.now() + Math.random().toString(36).substr(2, 9)\n    }));\n    \n    setTasks([...tasks, ...tasksWithIds]);\n    \n    // Extract unique categories\n    const uniqueCategories = [...new Set(newTasks.map(task => task.category))];\n    const existingCategoryNames = categories.map(cat => cat.name);\n    \n    // Add new categories with colors\n    const newCategories = uniqueCategories\n      .filter(cat => !existingCategoryNames.includes(cat))\n      .map(cat => ({\n        name: cat,\n        color: getRandomColor()\n      }));\n    \n    if (newCategories.length > 0) {\n      setCategories([...categories, ...newCategories]);\n    }\n    \n    // Reset feasibility analysis when new tasks are added\n    setFeasibilityAnalysis(null);\n  };\n  \n  const toggleTaskCompletion = (id) => {\n    setTasks(\n      tasks.map(task => \n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n    \n    // Reset feasibility analysis when tasks are completed\n    setFeasibilityAnalysis(null);\n  };\n  \n  const deleteTask = (id) => {\n    setTasks(tasks.filter(task => task.id !== id));\n    \n    // Reset feasibility analysis when tasks are deleted\n    setFeasibilityAnalysis(null);\n  };\n  \n  const getRandomColor = () => {\n    const colors = [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFBE0B', \n      '#FB5607', '#8338EC', '#3A86FF', '#FF006E'\n    ];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n  \n  const getCategoryColor = (categoryName) => {\n    const category = categories.find(cat => cat.name === categoryName);\n    return category ? category.color : '#888';\n  };\n  \n  return (\n    <TaskContext.Provider\n      value={{\n        tasks,\n        categories,\n        timeline,\n        setTimeline,\n        feasibilityAnalysis,\n        setFeasibilityAnalysis,\n        viewMode,\n        setViewMode,\n        totalRequiredHours,\n        addTasks,\n        toggleTaskCompletion,\n        deleteTask,\n        getCategoryColor,\n        getFilteredTasks,\n        getTasksByCategory\n      }}\n    >\n      {children}\n    </TaskContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}