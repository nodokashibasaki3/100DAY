{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useSpeechRecognition = ({\n  onResult,\n  onError\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.onresult = event => {\n        let interimTranscript = '';\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript + ' ';\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n        onResult(finalTranscript || interimTranscript);\n      };\n      recognitionRef.current.onerror = event => {\n        console.error('Speech recognition error', event.error);\n        onError(event.error);\n        setIsListening(false);\n      };\n    } else {\n      onError('Speech recognition is not supported in your browser.');\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onResult, onError]);\n  const toggleListening = () => {\n    if (isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    } else {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  return {\n    isListening,\n    toggleListening,\n    recognition: recognitionRef.current\n  };\n};\n_s(useSpeechRecognition, \"GyBmY1/9jr4GsaUPKlz5wGS2NBw=\");\nexport default useSpeechRecognition;","map":{"version":3,"names":["useState","useEffect","useRef","useSpeechRecognition","onResult","onError","_s","isListening","setIsListening","recognitionRef","window","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","onresult","event","interimTranscript","finalTranscript","i","resultIndex","results","length","transcript","isFinal","onerror","console","error","stop","toggleListening","start","recognition"],"sources":["/Users/nodokashibasaki/100DAY_DAY1/src/hooks/useSpeechRecognition.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst useSpeechRecognition = ({ onResult, onError }) => {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  \n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      \n      recognitionRef.current.onresult = (event) => {\n        let interimTranscript = '';\n        let finalTranscript = '';\n        \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript + ' ';\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n        \n        onResult(finalTranscript || interimTranscript);\n      };\n      \n      recognitionRef.current.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n        onError(event.error);\n        setIsListening(false);\n      };\n    } else {\n      onError('Speech recognition is not supported in your browser.');\n    }\n    \n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [onResult, onError]);\n  \n  const toggleListening = () => {\n    if (isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    } else {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  \n  return {\n    isListening,\n    toggleListening,\n    recognition: recognitionRef.current\n  };\n};\n\nexport default useSpeechRecognition;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMS,cAAc,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACd,IAAI,yBAAyB,IAAIS,MAAM,IAAI,mBAAmB,IAAIA,MAAM,EAAE;MACxE,MAAMC,iBAAiB,GAAGD,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB;MACpFH,cAAc,CAACI,OAAO,GAAG,IAAIF,iBAAiB,CAAC,CAAC;MAChDF,cAAc,CAACI,OAAO,CAACC,UAAU,GAAG,IAAI;MACxCL,cAAc,CAACI,OAAO,CAACE,cAAc,GAAG,IAAI;MAE5CN,cAAc,CAACI,OAAO,CAACG,QAAQ,GAAIC,KAAK,IAAK;QAC3C,IAAIC,iBAAiB,GAAG,EAAE;QAC1B,IAAIC,eAAe,GAAG,EAAE;QAExB,KAAK,IAAIC,CAAC,GAAGH,KAAK,CAACI,WAAW,EAAED,CAAC,GAAGH,KAAK,CAACK,OAAO,CAACC,MAAM,EAAEH,CAAC,EAAE,EAAE;UAC7D,MAAMI,UAAU,GAAGP,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,UAAU;UACjD,IAAIP,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAACK,OAAO,EAAE;YAC5BN,eAAe,IAAIK,UAAU,GAAG,GAAG;UACrC,CAAC,MAAM;YACLN,iBAAiB,IAAIM,UAAU;UACjC;QACF;QAEApB,QAAQ,CAACe,eAAe,IAAID,iBAAiB,CAAC;MAChD,CAAC;MAEDT,cAAc,CAACI,OAAO,CAACa,OAAO,GAAIT,KAAK,IAAK;QAC1CU,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEX,KAAK,CAACW,KAAK,CAAC;QACtDvB,OAAO,CAACY,KAAK,CAACW,KAAK,CAAC;QACpBpB,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;IACH,CAAC,MAAM;MACLH,OAAO,CAAC,sDAAsD,CAAC;IACjE;IAEA,OAAO,MAAM;MACX,IAAII,cAAc,CAACI,OAAO,EAAE;QAC1BJ,cAAc,CAACI,OAAO,CAACgB,IAAI,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAACzB,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAEvB,MAAMyB,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIvB,WAAW,EAAE;MACfE,cAAc,CAACI,OAAO,CAACgB,IAAI,CAAC,CAAC;MAC7BrB,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,MAAM;MACLC,cAAc,CAACI,OAAO,CAACkB,KAAK,CAAC,CAAC;MAC9BvB,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,OAAO;IACLD,WAAW;IACXuB,eAAe;IACfE,WAAW,EAAEvB,cAAc,CAACI;EAC9B,CAAC;AACH,CAAC;AAACP,EAAA,CA1DIH,oBAAoB;AA4D1B,eAAeA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}