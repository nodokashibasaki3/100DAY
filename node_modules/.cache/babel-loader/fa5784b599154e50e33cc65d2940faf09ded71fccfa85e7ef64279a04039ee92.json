{"ast":null,"code":"var _jsxFileName = \"/Users/nodokashibasaki/100DAY_DAY1/src/components/VoiceInput.js\",\n  _s = $RefreshSig$();\n// src/components/VoiceInput.js\nimport React, { useState, useEffect } from 'react';\nimport { useTaskContext } from '../context/TaskContext';\nimport useSpeechRecognition from '../hooks/useSpeechRecognition';\nimport { processTranscriptWithAI } from '../services/openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  apiKey,\n  isProcessing,\n  setIsProcessing,\n  error,\n  setError\n}) => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [transcriptHistory, setTranscriptHistory] = useState([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const {\n    addTasks\n  } = useTaskContext();\n\n  // Load transcript history from localStorage on component mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('transcript_history');\n    if (savedHistory) {\n      setTranscriptHistory(JSON.parse(savedHistory));\n    }\n  }, []);\n\n  // Save transcript history to localStorage whenever it changes\n  useEffect(() => {\n    if (transcriptHistory.length > 0) {\n      localStorage.setItem('transcript_history', JSON.stringify(transcriptHistory));\n    }\n  }, [transcriptHistory]);\n  const {\n    isListening,\n    toggleListening,\n    recognition\n  } = useSpeechRecognition({\n    onResult: transcriptText => setTranscript(transcriptText),\n    onError: errorMessage => setError(`Speech recognition error: ${errorMessage}`)\n  });\n  const handleProcessTranscript = async () => {\n    if (!transcript.trim() || !apiKey) return;\n    setIsProcessing(true);\n\n    // Add transcript to history with timestamp\n    const newTranscriptEntry = {\n      id: Date.now(),\n      text: transcript.trim(),\n      timestamp: new Date().toISOString(),\n      processed: false\n    };\n\n    // Add to history (limit to most recent 20)\n    const updatedHistory = [newTranscriptEntry, ...transcriptHistory].slice(0, 20);\n    setTranscriptHistory(updatedHistory);\n    try {\n      const newTasks = await processTranscriptWithAI(transcript, apiKey);\n\n      // Mark transcript as processed\n      const historyWithProcessed = updatedHistory.map(entry => entry.id === newTranscriptEntry.id ? {\n        ...entry,\n        processed: true\n      } : entry);\n      setTranscriptHistory(historyWithProcessed);\n      addTasks(newTasks);\n      setTranscript('');\n    } catch (error) {\n      console.error('Error processing transcript:', error);\n      setError('Failed to process your tasks. Please check your API key and try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Renamed from useHistoricalTranscript to loadHistoricalTranscript to avoid confusion with React Hooks\n  const loadHistoricalTranscript = text => {\n    setTranscript(text);\n  };\n  const deleteTranscriptEntry = id => {\n    setTranscriptHistory(transcriptHistory.filter(entry => entry.id !== id));\n  };\n  const formatTimestamp = isoString => {\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  };\n  const toggleHistoryView = () => {\n    setShowHistory(!showHistory);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `record-button ${isListening ? 'active' : ''}`,\n      onClick: toggleListening,\n      disabled: isProcessing,\n      children: isListening ? 'Stop Listening' : 'Start Talking'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listening-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pulse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"history-toggle\",\n          onClick: toggleHistoryView,\n          children: showHistory ? 'Hide History' : 'Show History'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-transcript\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: transcript,\n          onChange: e => setTranscript(e.target.value),\n          placeholder: \"Your spoken words will appear here. You can also type or edit directly.\",\n          rows: 4,\n          className: \"transcript-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"process-button\",\n          onClick: handleProcessTranscript,\n          disabled: isProcessing || !transcript.trim(),\n          children: isProcessing ? 'Processing...' : 'Process Tasks'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), showHistory && transcriptHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Transcripts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"history-list\",\n          children: transcriptHistory.map(entry => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `history-item ${entry.processed ? 'processed' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"history-text\",\n              onClick: () => loadHistoricalTranscript(entry.text),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: entry.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"history-timestamp\",\n                children: formatTimestamp(entry.timestamp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), entry.processed && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"processed-badge\",\n                children: \"Processed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-history\",\n              onClick: () => deleteTranscriptEntry(entry.id),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)]\n          }, entry.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), transcriptHistory.length > 5 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-history-button\",\n          onClick: () => setTranscriptHistory([]),\n          children: \"Clear History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"R56Pqz0un1S3WrPqNsApcQfbUgk=\", false, function () {\n  return [useTaskContext, useSpeechRecognition];\n});\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useEffect","useTaskContext","useSpeechRecognition","processTranscriptWithAI","jsxDEV","_jsxDEV","VoiceInput","apiKey","isProcessing","setIsProcessing","error","setError","_s","transcript","setTranscript","transcriptHistory","setTranscriptHistory","showHistory","setShowHistory","addTasks","savedHistory","localStorage","getItem","JSON","parse","length","setItem","stringify","isListening","toggleListening","recognition","onResult","transcriptText","onError","errorMessage","handleProcessTranscript","trim","newTranscriptEntry","id","Date","now","text","timestamp","toISOString","processed","updatedHistory","slice","newTasks","historyWithProcessed","map","entry","console","loadHistoricalTranscript","deleteTranscriptEntry","filter","formatTimestamp","isoString","date","toLocaleString","toggleHistoryView","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","_c","$RefreshReg$"],"sources":["/Users/nodokashibasaki/100DAY_DAY1/src/components/VoiceInput.js"],"sourcesContent":["// src/components/VoiceInput.js\nimport React, { useState, useEffect } from 'react';\nimport { useTaskContext } from '../context/TaskContext';\nimport useSpeechRecognition from '../hooks/useSpeechRecognition';\nimport { processTranscriptWithAI } from '../services/openai';\n\nconst VoiceInput = ({ apiKey, isProcessing, setIsProcessing, error, setError }) => {\n  const [transcript, setTranscript] = useState('');\n  const [transcriptHistory, setTranscriptHistory] = useState([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const { addTasks } = useTaskContext();\n  \n  // Load transcript history from localStorage on component mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('transcript_history');\n    if (savedHistory) {\n      setTranscriptHistory(JSON.parse(savedHistory));\n    }\n  }, []);\n  \n  // Save transcript history to localStorage whenever it changes\n  useEffect(() => {\n    if (transcriptHistory.length > 0) {\n      localStorage.setItem('transcript_history', JSON.stringify(transcriptHistory));\n    }\n  }, [transcriptHistory]);\n  \n  const { isListening, toggleListening, recognition } = useSpeechRecognition({\n    onResult: (transcriptText) => setTranscript(transcriptText),\n    onError: (errorMessage) => setError(`Speech recognition error: ${errorMessage}`)\n  });\n  \n  const handleProcessTranscript = async () => {\n    if (!transcript.trim() || !apiKey) return;\n    \n    setIsProcessing(true);\n    \n    // Add transcript to history with timestamp\n    const newTranscriptEntry = {\n      id: Date.now(),\n      text: transcript.trim(),\n      timestamp: new Date().toISOString(),\n      processed: false\n    };\n    \n    // Add to history (limit to most recent 20)\n    const updatedHistory = [newTranscriptEntry, ...transcriptHistory].slice(0, 20);\n    setTranscriptHistory(updatedHistory);\n    \n    try {\n      const newTasks = await processTranscriptWithAI(transcript, apiKey);\n      \n      // Mark transcript as processed\n      const historyWithProcessed = updatedHistory.map(entry => \n        entry.id === newTranscriptEntry.id ? { ...entry, processed: true } : entry\n      );\n      setTranscriptHistory(historyWithProcessed);\n      \n      addTasks(newTasks);\n      setTranscript('');\n    } catch (error) {\n      console.error('Error processing transcript:', error);\n      setError('Failed to process your tasks. Please check your API key and try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // Renamed from useHistoricalTranscript to loadHistoricalTranscript to avoid confusion with React Hooks\n  const loadHistoricalTranscript = (text) => {\n    setTranscript(text);\n  };\n  \n  const deleteTranscriptEntry = (id) => {\n    setTranscriptHistory(transcriptHistory.filter(entry => entry.id !== id));\n  };\n  \n  const formatTimestamp = (isoString) => {\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  };\n  \n  const toggleHistoryView = () => {\n    setShowHistory(!showHistory);\n  };\n  \n  return (\n    <div className=\"voice-section\">\n      <button \n        className={`record-button ${isListening ? 'active' : ''}`}\n        onClick={toggleListening}\n        disabled={isProcessing}\n      >\n        {isListening ? 'Stop Listening' : 'Start Talking'}\n      </button>\n      \n      {isListening && (\n        <div className=\"listening-indicator\">\n          <div className=\"pulse\"></div>\n          <p>Listening...</p>\n        </div>\n      )}\n      \n      <div className=\"transcript-section\">\n        <div className=\"transcript-header\">\n          <h3>Your Transcript</h3>\n          <button \n            className=\"history-toggle\"\n            onClick={toggleHistoryView}\n          >\n            {showHistory ? 'Hide History' : 'Show History'}\n          </button>\n        </div>\n        \n        <div className=\"current-transcript\">\n          <textarea\n            value={transcript}\n            onChange={e => setTranscript(e.target.value)}\n            placeholder=\"Your spoken words will appear here. You can also type or edit directly.\"\n            rows={4}\n            className=\"transcript-textarea\"\n          />\n          \n          <button \n            className=\"process-button\"\n            onClick={handleProcessTranscript}\n            disabled={isProcessing || !transcript.trim()}\n          >\n            {isProcessing ? 'Processing...' : 'Process Tasks'}\n          </button>\n        </div>\n        \n        {showHistory && transcriptHistory.length > 0 && (\n          <div className=\"transcript-history\">\n            <h4>Recent Transcripts</h4>\n            <ul className=\"history-list\">\n              {transcriptHistory.map(entry => (\n                <li key={entry.id} className={`history-item ${entry.processed ? 'processed' : ''}`}>\n                  <div className=\"history-text\" onClick={() => loadHistoricalTranscript(entry.text)}>\n                    <p>{entry.text}</p>\n                    <span className=\"history-timestamp\">{formatTimestamp(entry.timestamp)}</span>\n                    {entry.processed && <span className=\"processed-badge\">Processed</span>}\n                  </div>\n                  <button \n                    className=\"delete-history\"\n                    onClick={() => deleteTranscriptEntry(entry.id)}\n                  >\n                    ×\n                  </button>\n                </li>\n              ))}\n            </ul>\n            {transcriptHistory.length > 5 && (\n              <button \n                className=\"clear-history-button\"\n                onClick={() => setTranscriptHistory([])}\n              >\n                Clear History\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n};\n\nexport default VoiceInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}